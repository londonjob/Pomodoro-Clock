class App extends React.Component {
   constructor(props) {
    super(props);
    this.state = {
      brkLength: 5,
      seshLength: 25,
      timer: 1500,
      status: "stopped"
    };
  }

  handleCountDown = () => {
    if (this.state.timer > 0) {
      this.setState({
        timer: this.state.timer - 1
      });
    } else if (
      this.state.timer === 0 &&
      document.getElementById("timer-label").innerHTML === "Session"
    ) {
      document.getElementById("timer-label").innerHTML = "Break";
      this.audioBeep.play();
      this.setState({
        timer: this.state.brkLength * 60
      });
    } else if (
      this.state.timer === 0 &&
      document.getElementById("timer-label").innerHTML === "Break"
    ) {
      document.getElementById("timer-label").innerHTML = "Session";
      this.audioBeep.play();
      this.setState({
        timer: this.state.seshLength * 60
      });
    }
  };
  handleTimer = () => {
    if (this.state.status === "stopped") {
      clearInterval(this.timer);
      this.timer = setInterval(this.handleCountDown, 1000);
      document.getElementById("start_stop").innerHTML = "Pause";
      this.setState({
        status: "running"
      });
    } else {
      clearInterval(this.timer);
      document.getElementById("start_stop").innerHTML = "Start";
      this.setState({
        status: "stopped"
      });
    }
  };

  handleReset = () => {
    clearInterval(this.timer);
    document.getElementById("timer-label").innerHTML = "Session";
    this.setState({
      brkLength: 5,
      seshLength: 25,
      timer: 1500,
      status: "stopped"
    });
    this.audioBeep.pause();
    this.audioBeep.currentTime = 0;
  };

  handleDecrementBreak = () => {
    if (this.state.brkLength > 1) {
      this.setState({
        brkLength: this.state.brkLength - 1
      });
    }
  };
  handleIncrementBreak = () => {
    if (this.state.brkLength < 60) {
      this.setState({
        brkLength: this.state.brkLength + 1
      });
    }
  };

  handleDecrementSession = () => {
    if (this.state.seshLength > 1) {
      this.setState({
        seshLength: this.state.seshLength - 1,
        timer: this.state.timer - 60
      });
    }
  };
  handleIncrementSession = () => {
    if (this.state.seshLength < 60) {
      this.setState({
        seshLength: this.state.seshLength + 1,
        timer: this.state.timer + 60
      });
    }
  };

  render() {
    var min = Math.floor(this.state.timer / 60);
    var seconds = this.state.timer % 60;
    var minZwei = ("0" + min).slice(-2);
    var secondsZwei = ("0" + seconds).slice(-2);

    return (
      <div id="box1" className="container justify-content-center">
        <div className="row justify-content-center">
          <div className="col-md">
            <div className="border border-primary">
              <div className="text-center row justify-content-center">
                <p id='title'className="text-center">Pomodoro Clock</p>
              </div>
              <div className="row justify-content-center">
                <div className="çol-md">
                  <p id="break-label" className="row justify-content-center">
                    Break Length
                  </p>
                  <button
                    id="break-increment"
                    className="btn btn-success"
                    onClick={this.handleIncrementBreak}
                  >
                    +
                  </button>
                  <input
                    id="break-length"
                    className="text-center"
                    value={this.state.brkLength}
                    readOnly
                  />
                  <button
                    id="break-decrement"
                    className="btn btn-warning"
                    onClick={this.handleDecrementBreak}
                  >
                    -
                  </button>
                </div>
                <div className="çol-md-6">
                  <p id="session-label" className="row justify-content-center">
                    Session Length
                  </p>
                  <button
                    id="session-increment"
                    className="btn btn-success"
                    onClick={this.handleIncrementSession}
                  >
                    +
                  </button>
                  <input
                    id="session-length"
                    className="text-center"
                    value={this.state.seshLength}
                    readOnly
                  />
                  <button
                    id="session-decrement"
                    className="btn btn-warning"
                    onClick={this.handleDecrementSession}
                  >
                    -
                  </button>
                </div>
              </div>

              <div id='box'className="row justify-content-center">
                <div className="col-md">
                  <p className="row justify-content-center" id="timer-label">
                    Session
                  </p>
                  <div className="row justify-content-center text-center">
                    <p
                      className="row justify-content-center text-center"
                      id="time-left"
                    >
                      {" "}
                      {minZwei + ":" + secondsZwei}
                    </p>
                  </div>
                </div>
              </div>
              <div className="row justify-content-center">
                <button
                  id="start_stop"
                  className="btn btn-primary"
                  onClick={this.handleTimer}
                >
                  Start
                </button>

                <button id="reset" className="btn btn-danger" onClick={this.handleReset}>
                  Reset
                </button>
              </div>
              <audio
                id="beep"
                preload="auto"
                src="https://goo.gl/65cBl1"
                ref={audio => {
                  this.audioBeep = audio;
                }}
              />
            </div>
          </div>
        </div>
        <div>
        <footer>
          <p className="text-center"> Written by <a href="https://github.com/londonjob" target="_blank">londonjob</a>
          </p>
            </footer>
        </div>
      </div>
    );
  }
}



    
    
  



  
  
ReactDOM.render(<App />, document.getElementById("root"));
